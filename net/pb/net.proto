syntax = "proto3";
package net.pb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.benchgen_all) = true;
option (gogoproto.populate_all) = true;

// Log represents a thread log.
message Log {
    // ID of the log.
    bytes ID = 1 [(gogoproto.customtype) = "ProtoPeerID"];

    // pubKey of the log.
    bytes pubKey = 2 [(gogoproto.customtype) = "ProtoPubKey"];

    // addrs of the log.
    repeated bytes addrs = 3 [(gogoproto.customtype) = "ProtoAddr"];

    // heads of the log.
    repeated bytes heads = 4 [(gogoproto.customtype) = "ProtoCid"];

    // Record is a thread record containing link data.
    message Record {
        // recordNode is the top-level node's raw data.
        bytes recordNode = 1;

        // eventNode is the event node's raw data.
        bytes eventNode = 2;

        // headerNode is the header node's raw data.
        bytes headerNode = 3;

        // bodyNode is the body node's raw data.
        bytes bodyNode = 4;
    }
}

// GetLogsRequest is used to request thread logs.
message GetLogsRequest {
    // header is the message header.
    Header header = 1;

    // threadID is the target thread's ID.
    bytes threadID = 2 [(gogoproto.customtype) = "ProtoThreadID"];

    // followKey for the thread.
    bytes followKey = 3 [(gogoproto.customtype) = "ProtoKey"];

    // Header holds sender information.
    message Header {
        bytes from = 1 [(gogoproto.customtype) = "ProtoPeerID"];
    }
}

// GetLogsReply is the response from a GetLogsRequest.
message GetLogsReply {
    // logs are the result of the request.
    repeated Log logs = 1;
}

// PushLogRequest is used to push a thread log to a peer.
message PushLogRequest {
    // header is the message header.
    Header header = 1;

    // threadID is the target thread's ID.
    bytes threadID = 2 [(gogoproto.customtype) = "ProtoThreadID"];

    // followKey for the thread.
    bytes followKey = 3 [(gogoproto.customtype) = "ProtoKey"];

    // readKey for the thread.
    bytes readKey = 4 [(gogoproto.customtype) = "ProtoKey"];

    // log is the actual log payload.
    Log log = 5;

    // Header holds sender information.
    message Header {
        bytes from = 1 [(gogoproto.customtype) = "ProtoPeerID"];
    }
}

// PushLogReply is the response from a PushLogRequest.
message PushLogReply {}

// GetRecordsRequest is used to request records from a log address.
message GetRecordsRequest {
    // header is the message header.
    Header header = 1;

    // threadID is the target thread's ID.
    bytes threadID = 2 [(gogoproto.customtype) = "ProtoThreadID"];

    // followKey for the thread.
    bytes followKey = 3 [(gogoproto.customtype) = "ProtoKey"];

    // List of requested logs.
    repeated LogEntry logs = 4;

    // LogEntry represents a single log.
    message LogEntry {
        // logID of this entry.
        bytes logID = 1 [(gogoproto.customtype) = "ProtoPeerID"];

        // offset tells the recipient at which point to consider records new for the reply.
        bytes offset = 2 [(gogoproto.customtype) = "ProtoCid"];

        // limit indicates the max number of records to return.
        int32 limit = 3;
    }

    // Header holds sender information.
    message Header {
        bytes from = 1 [(gogoproto.customtype) = "ProtoPeerID"];
    }
}

// GetRecordsReply contains records requested with a GetRecordsRequest.
message GetRecordsReply {
    // records are the result of the request.
    repeated LogEntry logs = 1;

    // LogEntry represents a single log.
    message LogEntry {
        // logID of this entry.
        bytes logID = 1 [(gogoproto.customtype) = "ProtoPeerID"];

        // records returned for this entry.
        repeated Log.Record records = 2;

        // log contains new log info that was missing from the request.
        Log log = 3;
    }
}

// PushRecordRequest is used to push a log record to a peer.
message PushRecordRequest {
    // header is the header message.
    Header header = 1;

    // threadID is the target thread's ID.
    bytes threadID = 2 [(gogoproto.customtype) = "ProtoThreadID"];

    // logID is the target log's ID.
    bytes logID = 3 [(gogoproto.customtype) = "ProtoPeerID"];

    // record is the actual record payload.
    Log.Record record = 4;

    // Header holds sender and key information.
    message Header {
        // from is the sender's peerID.
        bytes from = 1 [(gogoproto.customtype) = "ProtoPeerID"];

        // signature is the signature of the payload.
        bytes signature = 2;

        // key is the sender's public key used to sign the payload.
        bytes key = 3 [(gogoproto.customtype) = "ProtoPubKey"];
    }
}

// PushRecordReply is the response from a PushRecordRequest.
message PushRecordReply {}

// Service is the peer-to-peer network API for thread orchestration.
service Service {
    // GetLogs from a peer.
    rpc GetLogs(GetLogsRequest) returns (GetLogsReply) {}

    // PushLog to a peer.
    rpc PushLog(PushLogRequest) returns (PushLogReply) {}

    // GetRecords from a peer.
    rpc GetRecords(GetRecordsRequest) returns (GetRecordsReply) {}

    // PushRecord to a peer.
    rpc PushRecord(PushRecordRequest) returns (PushRecordReply) {}
}

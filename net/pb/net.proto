syntax = "proto3";
package net.pb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.benchgen_all) = true;
option (gogoproto.populate_all) = true;

// Header holds a key and signature for a request.
message Header {
    // pubKey is the author's public key.
    bytes pubKey = 1 [(gogoproto.customtype) = "ProtoPubKey"];
    // signature is the message signature.
    bytes signature = 2;
}

// Log represents a thread log.
message Log {
    // ID of the log.
    bytes ID = 1 [(gogoproto.customtype) = "ProtoPeerID"];
    // pubKey of the log.
    bytes pubKey = 2 [(gogoproto.customtype) = "ProtoPubKey"];
    // addrs of the log.
    repeated bytes addrs = 3 [(gogoproto.customtype) = "ProtoAddr"];
    // head of the log.
    bytes head = 4 [(gogoproto.customtype) = "ProtoCid"];

    // Record is a thread record containing link data.
    message Record {
        // recordNode is the top-level node's raw data.
        bytes recordNode = 1;
        // eventNode is the event node's raw data.
        bytes eventNode = 2;
        // headerNode is the header node's raw data.
        bytes headerNode = 3;
        // bodyNode is the body node's raw data.
        bytes bodyNode = 4;
    }
}

// GetLogsRequest is used to request thread logs.
message GetLogsRequest {
    // header is the message header.
    Header header = 1;
    // body is the message body.
    Body body = 2;

    message Body {
        // threadID is the target thread's ID.
        bytes threadID = 1 [(gogoproto.customtype) = "ProtoThreadID"];
        // serviceKey for the thread.
        bytes serviceKey = 2 [(gogoproto.customtype) = "ProtoKey"];
    }
}

// GetLogsReply is the response from a GetLogsRequest.
message GetLogsReply {
    // logs are the result of the request.
    repeated Log logs = 1;
}

// PushLogRequest is used to push a thread log to a peer.
message PushLogRequest {
    // header is the message header.
    Header header = 1;
    // body is the message body.
    Body body = 2;

    message Body {
        // threadID is the target thread's ID.
        bytes threadID = 1 [(gogoproto.customtype) = "ProtoThreadID"];
        // serviceKey for the thread.
        bytes serviceKey = 2 [(gogoproto.customtype) = "ProtoKey"];
        // readKey for the thread.
        bytes readKey = 3 [(gogoproto.customtype) = "ProtoKey"];
        // log is the actual log payload.
        Log log = 4;
    }
}

// PushLogReply is the response from a PushLogRequest.
message PushLogReply {}

// GetRecordsRequest is used to request records from a log address.
message GetRecordsRequest {
    // header is the message header.
    Header header = 1;
    // body is the message body.
    Body body = 2;

    message Body {
        // threadID is the target thread's ID.
        bytes threadID = 1 [(gogoproto.customtype) = "ProtoThreadID"];
        // serviceKey for the thread.
        bytes serviceKey = 2 [(gogoproto.customtype) = "ProtoKey"];
        // List of requested logs.
        repeated LogEntry logs = 3;

        // LogEntry represents a single log.
        message LogEntry {
            // logID of this entry.
            bytes logID = 1 [(gogoproto.customtype) = "ProtoPeerID"];
            // offset tells the recipient at which point to consider records new for the reply.
            bytes offset = 2 [(gogoproto.customtype) = "ProtoCid"];
            // limit indicates the max number of records to return.
            int32 limit = 3;
        }
    }
}

// GetRecordsReply contains records requested with a GetRecordsRequest.
message GetRecordsReply {
    // records are the result of the request.
    repeated LogEntry logs = 1;

    // LogEntry represents a single log.
    message LogEntry {
        // logID of this entry.
        bytes logID = 1 [(gogoproto.customtype) = "ProtoPeerID"];
        // records returned for this entry.
        repeated Log.Record records = 2;
        // log contains new log info that was missing from the request.
        Log log = 3;
    }
}

// PushRecordRequest is used to push a log record to a peer.
message PushRecordRequest {
    // header is the message header.
    Header header = 1;
    // body is the message body.
    Body body = 2;

    message Body {
        // threadID is the target thread's ID.
        bytes threadID = 1 [(gogoproto.customtype) = "ProtoThreadID"];
        // logID is the target log's ID.
        bytes logID = 2 [(gogoproto.customtype) = "ProtoPeerID"];
        // record is the actual record payload.
        Log.Record record = 3;
    }
}

// PushRecordReply is the response from a PushRecordRequest.
message PushRecordReply {}

// Service is the peer-to-peer network API for thread orchestration.
service Service {
    // GetLogs from a peer.
    rpc GetLogs(GetLogsRequest) returns (GetLogsReply) {}
    // PushLog to a peer.
    rpc PushLog(PushLogRequest) returns (PushLogReply) {}
    // GetRecords from a peer.
    rpc GetRecords(GetRecordsRequest) returns (GetRecordsReply) {}
    // PushRecord to a peer.
    rpc PushRecord(PushRecordRequest) returns (PushRecordReply) {}
}

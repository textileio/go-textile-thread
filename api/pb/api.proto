syntax = "proto3";
package api.pb;

option java_multiple_files = true;
option java_package = "io.textile.threads_grpc";
option java_outer_classname = "Threads";
option objc_class_prefix = "THREADS";

message Header {
    bytes pubKey = 1;
    bytes signature = 2;
}

message CollectionConfig {
    string name = 1;
    bytes schema = 2;
    repeated IndexConfig indexes = 3;

    message IndexConfig {
        string path = 1;
        bool unique = 2;
    }
}

message NewDBRequest {
    Header header = 1;
    Body body = 2;

    message Body {
        bytes dbID = 1;
        repeated CollectionConfig collections = 2;
    }
}

message NewDBFromAddrRequest {
    Header header = 1;
    Body body = 2;

    message Body {
        bytes addr = 1;
        bytes key = 2;
        repeated CollectionConfig collections = 3;
    }
}

message NewDBReply {}

message GetDBInfoRequest {
    Header header = 1;
    Body body = 2;

    message Body {
        bytes dbID = 1;
    }
}

message GetDBInfoReply {
    repeated bytes addrs = 1;
    bytes key = 2;
}

message NewCollectionRequest {
    Header header = 1;
    Body body = 2;

    message Body {
        bytes dbID = 1;
        CollectionConfig config = 2;
    }
}

message NewCollectionReply {}

message CreateRequest {
    Header header = 1;
    Body body = 2;

    message Body {
        bytes dbID = 1;
        string collectionName = 2;
        repeated bytes instances = 3;
    }
}

message CreateReply {
    repeated string instanceIDs = 1;
}

message SaveRequest {
    Header header = 1;
    Body body = 2;

    message Body {
        bytes dbID = 1;
        string collectionName = 2;
        repeated bytes instances = 3;
    }
}

message SaveReply {}

message DeleteRequest {
    Header header = 1;
    Body body = 2;

    message Body {
        bytes dbID = 1;
        string collectionName = 2;
        repeated string instanceIDs = 3;
    }
}

message DeleteReply {}

message HasRequest {
    Header header = 1;
    Body body = 2;

    message Body {
        bytes dbID = 1;
        string collectionName = 2;
        repeated string instanceIDs = 3;
    }
}

message HasReply {
    bool exists = 1;
}

message FindRequest {
    Header header = 1;
    Body body = 2;

    message Body {
        bytes dbID = 1;
        string collectionName = 2;
        bytes queryJSON = 3;
    }
}

message FindReply {
    repeated bytes instances = 1;
}

message FindByIDRequest {
    Header header = 1;
    Body body = 2;

    message Body {
        bytes dbID = 1;
        string collectionName = 2;
        string instanceID = 3;
    }
}

message FindByIDReply {
    bytes instance = 1;
}

message StartTransactionRequest {
    Header header = 1;
    Body body = 2;

    message Body {
        bytes dbID = 1;
        string collectionName = 2;
    }
}

message ReadTransactionRequest {
    oneof option {
        StartTransactionRequest startTransactionRequest = 1;
        HasRequest hasRequest = 2;
        FindRequest findRequest = 3;
        FindByIDRequest findByIDRequest = 4;
    }
}

message ReadTransactionReply {
    oneof option {
        HasReply hasReply = 1;
        FindReply findReply = 2;
        FindByIDReply findByIDReply = 3;
    }
}

message WriteTransactionRequest {
    oneof option {
        StartTransactionRequest startTransactionRequest = 1;
        CreateRequest createRequest = 2;
        SaveRequest saveRequest = 3;
        DeleteRequest deleteRequest = 4;
        HasRequest hasRequest = 5;
        FindRequest findRequest = 6;
        FindByIDRequest findByIDRequest = 7;
    }
}

message WriteTransactionReply {
    oneof option {
        CreateReply createReply = 1;
        SaveReply saveReply = 2;
        DeleteReply deleteReply = 3;
        HasReply hasReply = 4;
        FindReply findReply = 5;
        FindByIDReply findByIDReply = 6;
    }
}

message ListenRequest {
    Header header = 1;
    Body body = 2;

    message Body {
        bytes dbID = 1;
        repeated Filter filters = 2;

        message Filter {
            string collectionName = 1;
            string instanceID = 2;
            enum Action {
                ALL = 0;
                CREATE = 1;
                SAVE = 2;
                DELETE = 3;
            }
            Action action = 3;
        }
    }
}

message ListenReply {
    string collectionName = 1;
    string instanceID = 2;
    Action action = 3;
    bytes instance = 4;

    enum Action {
        CREATE = 0;
        SAVE = 1;
        DELETE = 2;
    }
}

service API {
    rpc NewDB(NewDBRequest) returns (NewDBReply) {}
    rpc NewDBFromAddr(NewDBFromAddrRequest) returns (NewDBReply) {}
    rpc GetDBInfo(GetDBInfoRequest) returns (GetDBInfoReply) {}
    rpc NewCollection(NewCollectionRequest) returns (NewCollectionReply) {}
    rpc Create(CreateRequest) returns (CreateReply) {}
    rpc Save(SaveRequest) returns (SaveReply) {}
    rpc Delete(DeleteRequest) returns (DeleteReply) {}
    rpc Has(HasRequest) returns (HasReply) {}
    rpc Find(FindRequest) returns (FindReply) {}
    rpc FindByID(FindByIDRequest) returns (FindByIDReply) {}
    rpc ReadTransaction(stream ReadTransactionRequest) returns (stream ReadTransactionReply) {}
    rpc WriteTransaction(stream WriteTransactionRequest) returns (stream WriteTransactionReply) {}
    rpc Listen(ListenRequest) returns (stream ListenReply) {}
}

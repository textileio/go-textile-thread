syntax = "proto3";
package api.pb;

option java_multiple_files = true;
option java_package = "io.textile.threads_grpc";
option java_outer_classname = "Threads";
option objc_class_prefix = "THRDS";

message NewDBRequest {}

message NewDBReply {
    string ID = 1;
}

message NewCollectionRequest {
    string DBID = 1;
    string name = 2;
    string schema = 3;
    message IndexConfig {
        string path = 1;
        bool unique = 2;
    }
    repeated IndexConfig indexes = 4;
}

message NewCollectionReply {}

message StartRequest {
    string DBID = 1;
}

message StartReply {}

message StartFromAddressRequest {
    string DBID = 1;
    string address = 2;
    bytes followKey = 3;
    bytes readKey = 4;
}

message StartFromAddressReply {}

message GetDBLinkRequest {
    string DBID = 1;
}

message GetDBLinkReply {
    repeated string addresses = 1;
    bytes followKey = 2;
    bytes readKey = 3;
}

message CreateRequest {
    string DBID = 1;
    string collectionName = 2;
    repeated string values = 3;
}

message CreateReply {
    repeated string instances = 1;
}

message SaveRequest {
    string DBID = 1;
    string collectionName = 2;
    repeated string values = 3;
}

message SaveReply {}

message DeleteRequest {
    string DBID = 1;
    string collectionName = 2;
    repeated string instanceIDs = 3;
}

message DeleteReply {}

message HasRequest {
    string DBID = 1;
    string collectionName = 2;
    repeated string instanceIDs = 3;
}

message HasReply {
    bool exists = 1;
}

message FindRequest {
    string DBID = 1;
    string collectionName = 2;
    bytes queryJSON = 3;
}

message FindReply {
    repeated bytes instances = 1;
}

message FindByIDRequest {
    string DBID = 1;
    string collectionName = 2;
    string instanceID = 3;
}

message FindByIDReply {
    string instance = 1;
}

message StartTransactionRequest {
    string DBID = 1;
    string collectionName = 2;
}

message ReadTransactionRequest {
    oneof option {
        StartTransactionRequest startTransactionRequest = 1;
        HasRequest hasRequest = 2;
        FindRequest findRequest = 3;
        FindByIDRequest findByIDRequest = 4;
    }
}

message ReadTransactionReply {
    oneof option {
        HasReply hasReply = 1;
        FindReply findReply = 2;
        FindByIDReply findByIDReply = 3;
    }
}

message WriteTransactionRequest {
    oneof option {
        StartTransactionRequest startTransactionRequest = 1;
        CreateRequest createRequest = 2;
        SaveRequest saveRequest = 3;
        DeleteRequest deleteRequest = 4;
        HasRequest hasRequest = 5;
        FindRequest findRequest = 6;
        FindByIDRequest findByIDRequest = 7;
    }
}

message WriteTransactionReply {
    oneof option {
        CreateReply createReply = 1;
        SaveReply saveReply = 2;
        DeleteReply deleteReply = 3;
        HasReply hasReply = 4;
        FindReply findReply = 5;
        FindByIDReply findByIDReply = 6;
    }
}

message ListenRequest {
    string DBID = 1;
    message Filter {
        string collectionName = 1;
        string instanceID = 2;
        enum Action {
            ALL = 0;
            CREATE = 1;
            SAVE = 2;
            DELETE = 3;
        }
        Action action = 3;
    }
    repeated Filter filters = 2;
}

message ListenReply {
    string collectionName = 1;
    string instanceID = 2;
    enum Action {
        CREATE = 0;
        SAVE = 1;
        DELETE = 2;
    }
    Action action = 3;
    bytes instance = 4;
}

service API {
    rpc NewDB(NewDBRequest) returns (NewDBReply) {}
    rpc NewCollection(NewCollectionRequest) returns (NewCollectionReply) {}
    rpc Start(StartRequest) returns (StartReply) {}
    rpc StartFromAddress(StartFromAddressRequest) returns (StartFromAddressReply) {}
    rpc GetDBLink(GetDBLinkRequest) returns (GetDBLinkReply) {}
    rpc Create(CreateRequest) returns (CreateReply) {}
    rpc Save(SaveRequest) returns (SaveReply) {}
    rpc Delete(DeleteRequest) returns (DeleteReply) {}
    rpc Has(HasRequest) returns (HasReply) {}
    rpc Find(FindRequest) returns (FindReply) {}
    rpc FindByID(FindByIDRequest) returns (FindByIDReply) {}
    rpc ReadTransaction(stream ReadTransactionRequest) returns (stream ReadTransactionReply) {}
    rpc WriteTransaction(stream WriteTransactionRequest) returns (stream WriteTransactionReply) {}
    rpc Listen(ListenRequest) returns (stream ListenReply) {}
}
